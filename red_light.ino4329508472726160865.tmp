#include <Arduino.h>
#include <U8g2lib.h>
#include <DS3231.h>
#include <Wire.h>          // For the i2c devices
#include <string.h>

#define DS3231_I2C_ADDRESS 104    // RTC is connected, address is Hex68 (Decimal 104)


byte seconds, minutes, hours, day, date, month, year;
byte temp_hours, temp_minutes;
char weekDay[4];
byte tMSB, tLSB;
float my_temp;
char my_array[100];            // Character array for printing something.
bool b = false;
int hour_blink = 0;
bool blink_bool = true;


#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif

U8G2_SSD1306_128X32_UNIVISION_F_SW_I2C u8g2(U8G2_R0, /* clock=*/ SCL, /* data=*/ SDA, /* reset=*/ U8X8_PIN_NONE);   // Adafruit Feather ESP8266/32u4 Boards + FeatherWing OLED//U8G2_SSD1306_128X32_UNIVISION_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);  // Adafruit ESP8266/32u4/ARM Boards + FeatherWing OLED


#define STANDBY 0//in this mode the time it is showed, also the wake up time
#define H_WTIME  1//in this mode the wake up time it is showed with the hour tilting so you
                //can change the hour
#define M_WTIME  2//Minutes tilting so you can change minutes
//next state returns to STANDBY

const int BULB = 6; //pin of the activation of the red bulb

//for setting up the buttons for interruptions
const byte button1 = 2;
const byte button2 = 3;

//indicates if any of the buttons has been pressed
volatile boolean f1 = false;
volatile boolean f2 = false;

//indicates de actual state of the machine state
byte state = STANDBY;

long actual_time = 0; //get actual time
long wakeup_time = 0; //get actual time and add 7 hours 37 minutes


//changes to the next mode
void fbutton1(){
  f1 = true;
}


void fbutton2(){
  f2 = true;
}


// OLED FUNCTION
void print_oled(char * a){
  u8g2.clearBuffer();          // clear the internal memory
  u8g2.setFont(u8g2_font_ncenB08_tr); // choose a suitable font
  u8g2.drawStr(0,29,a);  // write something to the internal memory
  u8g2.sendBuffer();          // transfer internal memory to the display
}


// DS3231 FUNCTIONS
// Convert normal decimal numbers to binary coded decimal
byte decToBcd(byte val)
{
  return ( (val/10*16) + (val%10) );
}

void watchConsole()
{
  if (Serial.available()) {      // Look for char in serial queue and process if found
    if (Serial.read() == 84) {      //If command = "T" Set Date
      set3231Date();
      get3231Date();
      Serial.println(" ");
    }
  }
}
 
void set3231Date()
{
//T(sec)(min)(hour)(dayOfWeek)(dayOfMonth)(month)(year)
//T(00-59)(00-59)(00-23)(1-7)(01-31)(01-12)(00-99)
//Example: 02-Feb-09 @ 19:57:11 for the 3rd day of the week -> T1157193020209
// T1124154091014
  seconds = (byte) ((Serial.read() - 48) * 10 + (Serial.read() - 48)); // Use of (byte) type casting and ascii math to achieve result.  
  minutes = (byte) ((Serial.read() - 48) *10 +  (Serial.read() - 48));
  hours   = (byte) ((Serial.read() - 48) *10 +  (Serial.read() - 48));
  day     = (byte) (Serial.read() - 48);
  date    = (byte) ((Serial.read() - 48) *10 +  (Serial.read() - 48));
  month   = (byte) ((Serial.read() - 48) *10 +  (Serial.read() - 48));
  year    = (byte) ((Serial.read() - 48) *10 +  (Serial.read() - 48));
  Wire.beginTransmission(DS3231_I2C_ADDRESS);
  Wire.write(0x00);
  Wire.write(decToBcd(seconds));
  Wire.write(decToBcd(minutes));
  Wire.write(decToBcd(hours));
  Wire.write(decToBcd(day));
  Wire.write(decToBcd(date));
  Wire.write(decToBcd(month));
  Wire.write(decToBcd(year));
  Wire.endTransmission();
}


void get3231Date()
{
  // send request to receive data starting at register 0
  Wire.beginTransmission(DS3231_I2C_ADDRESS); // 104 is DS3231 device address
  Wire.write(0x00); // start at register 0
  Wire.endTransmission();
  Wire.requestFrom(DS3231_I2C_ADDRESS, 7); // request seven bytes

  if(Wire.available()) {
    seconds = Wire.read(); // get seconds
    minutes = Wire.read(); // get minutes
    hours   = Wire.read();   // get hours
    day     = Wire.read();
    date    = Wire.read();
    month   = Wire.read(); //temp month
    year    = Wire.read();
       
    seconds = (((seconds & B11110000)>>4)*10 + (seconds & B00001111)); // convert BCD to decimal
    minutes = (((minutes & B11110000)>>4)*10 + (minutes & B00001111)); // convert BCD to decimal
    hours   = (((hours & B00110000)>>4)*10 + (hours & B00001111)); // convert BCD to decimal (assume 24 hour mode)
    day     = (day & B00000111); // 1-7
    date    = (((date & B00110000)>>4)*10 + (date & B00001111)); // 1-31
    month   = (((month & B00010000)>>4)*10 + (month & B00001111)); //msb7 is century overflow
    year    = (((year & B11110000)>>4)*10 + (year & B00001111));
  }
  else {
    //oh noes, no data!
  }
 
  switch (day) {
    case 1:
      strcpy(weekDay, "Sun");
      break;
    case 2:
      strcpy(weekDay, "Mon");
      break;
    case 3:
      strcpy(weekDay, "Tue");
      break;
    case 4:
      strcpy(weekDay, "Wed");
      break;
    case 5:
      strcpy(weekDay, "Thu");
      break;
    case 6:
      strcpy(weekDay, "Fri");
      break;
    case 7:
      strcpy(weekDay, "Sat");
      break;
  }
}

float get3231Temp()
{
  float temp3231;
  
  //temp registers (11h-12h) get updated automatically every 64s
  Wire.beginTransmission(DS3231_I2C_ADDRESS);
  Wire.write(0x11);
  Wire.endTransmission();
  Wire.requestFrom(DS3231_I2C_ADDRESS, 2);
 
  if(Wire.available()) {
    tMSB = Wire.read(); //2's complement int portion
    tLSB = Wire.read(); //fraction portion
   
    temp3231 = (tMSB & B01111111); //do 2's math on Tmsb
    temp3231 += ( (tLSB >> 6) * 0.25 ); //only care about bits 7 & 8
  }
  else {
    //oh noes, no data!
  }
   
  return temp3231;
}


void setup() {

  Wire.begin();
  u8g2.begin(); //OLED display
  pinMode(BULB, OUTPUT);  //bulb
  pinMode(button1, INPUT_PULLUP); //button for changing mode
  pinMode(button2, INPUT_PULLUP); //button for adding time
  attachInterrupt(digitalPinToInterrupt(button1), fbutton1, FALLING);
  attachInterrupt(digitalPinToInterrupt(button2), fbutton2, FALLING);
  Serial.begin(9600);
  Serial.println("PROGRAM READY");

}

void loop() {

  // DS3231 ACTIONS
  watchConsole(); 
  get3231Date();/*
  Serial.print(weekDay); 
  Serial.print(", "); 
  Serial.print(date, DEC); 
  Serial.print("/"); 
  Serial.print(month, DEC);
  Serial.print("/"); 
  Serial.print(year, DEC); 
  Serial.print(" - ");
  Serial.print(hours, DEC);
  Serial.print(":"); 
  Serial.print(minutes, DEC);
  Serial.print(":"); 
  Serial.print(seconds, DEC);
  */

  

  //machine state
  //digitalWrite(BULB, state);

  switch(state){

    case STANDBY:
        //shows the hour
        sprintf(my_array, "%02u:%02u", hours, minutes);
        Serial.println(my_array);
        sprintf(my_array, "%02u:%02u", temp_hours, temp_minutes);
        Serial.println(my_array);
        Serial.println("");
        print_oled(my_array);

        if(temp_hours == hours && temp_minutes == minutes){
          if(b == false){
            digitalWrite(BULB, HIGH);
            temp_minutes += 1;
            b = true;
          }else{
            digitalWrite(BULB, LOW);
            temp_minutes -= 1;
          }
        }

        if(f1){ //mode button pressed
          //change the state
          temp_hours=hours;
          temp_minutes=minutes;
          state = H_WTIME;
          f1 = false;
        }
        
    break;


    case H_WTIME:
        //shows the wake up time with hour tilting
        hour_blink++;
        if(hour_blink%4 == 0){
          hour_blink = 0;
          blink_bool = ! blink_bool;
        }
        if(blink_bool){
          sprintf(my_array, "%02u:%02u", temp_hours, temp_minutes);
        }else{
          sprintf(my_array, "  :%02u", temp_minutes);
        }
        
        Serial.println(my_array);
        //print_oled("WAKE UP TIME HOUR");

        
        if(f1){
          state = M_WTIME;
          f1 = false;
          f2 = false;
        }else if(f2){

          if(temp_hours == 23){
            temp_hours=0;
          }else{
            temp_hours++;
          }
          f2 = false;
        }
    break;


    case M_WTIME:
        //shows the wake up time with minute tilting
        sprintf(my_array, "%02u:%02u", temp_hours, temp_minutes);
        Serial.println(my_array);
        print_oled("WAKE UP TIME MINUTE");
        if(f1){
          state = STANDBY;
          f1 = false;
          f2 = false;
        }else if(f2){
          if(temp_minutes == 59){
            temp_minutes=0;
          }else{
            temp_minutes++;
          }
          f2 = false;
        }
        
    break;
  }

  delay(100);

}
